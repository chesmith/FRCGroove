@using FRCGroove.Lib.models
@using FRCGroove.Web.Models
@model FRCGroove.Web.Models.Dashboard

@{
    string eventName = string.Empty;
    if (Model != null && Model.FrcEvent != null)
    {
        eventName = $" - {Model.FrcEvent.name}";
    }
    ViewBag.Title = $"FRC Groove{eventName}";
}

@Html.Partial("Navigation", "Schedule")

@if (Model != null)
{
    <div class="card" style="border-bottom-left-radius:0;border-bottom-right-radius:0">
        @if (Model.FrcEvent != null)
        {
            <div class="card-header" style="margin-bottom:0;padding: 0.5rem"><h6 style="margin-bottom:0">@Model.FrcEvent.name</h6>
            <span style="font-size:11px; margin-bottom:10px">@Model.FrcEvent.dateStart.ToString("ddd M/d") to @Model.FrcEvent.dateEnd.ToString("ddd M/d")</span></div>
        }
        <div class="card-body" style="padding:0.5rem 1rem 0.5rem 1rem">
            @{
                if (Model.EventState == FRCEventState.Past)
                {
                    <p>Event appears to be complete<br /><a href="#Quarterfinals">playoffs</a> / <a href="#Brackets">brackets</a></p>
                }
                else if (Model.EventState == FRCEventState.Future)
                {
                    <p>Match schedule not yet available</p>
                }
                else if (Model.EventState == FRCEventState.Invalid)
                {
                    <p>This appears to be an invalid event code<br />(<a href="/">return to event listing</a>)</p>
                }
                else
                {
                    if(Model.EventState == FRCEventState.Qualifications && Model.Matches != null && Model.Matches.Count(m => m.tournamentLevel == "Qualification" && m.actualStartTime != null) == 0)
                    {
                        <p>Qualifications haven't started</p>
                    }
                    else if ((Model.EventState == FRCEventState.Qualifications && Model.Matches != null && Model.Matches.Count(m => m.tournamentLevel == "Qualification" && m.actualStartTime == null) == 0) || (Model.EventState == FRCEventState.Quarterfinals && Model.Matches.Count(m => m.tournamentLevel == "Playoff" && m.actualStartTime != null) == 0))
                    {
                        <p>Qualifications have completed - waiting for playoffs to begin
                            @if(Model.Matches.Count(m => m.tournamentLevel == "Playoff") > 0) {<span>(<a href="#nextmatch">next match</a>)</span>}
                        </p>
                    }
                    else if (Model.EventState == FRCEventState.Qualifications || Model.EventState == FRCEventState.Quarterfinals || Model.EventState == FRCEventState.Semifinals || Model.EventState == FRCEventState.Finals)
                    {
                        int scheduleOffset = (int)Math.Round(Model.ScheduleOffset, 0);
                        if (scheduleOffset < 0)
                        {
                            <p style="font-style:italic; color:#046705;">@Model.EventState.ToString() are running about @Math.Abs(scheduleOffset) minute@(Math.Abs(scheduleOffset) > 1 ? "s" : "") ahead (<a href="#nextmatch">next match</a>)</p>
                        }
                        else if (scheduleOffset > 0)
                        {
                            <p style="font-style: italic"><span style="color:#7c0a0a; font-style:italic">@Model.EventState.ToString() are running about @Math.Abs(scheduleOffset) minute@(Math.Abs(scheduleOffset) > 1 ? "s" : "") behind</span> (<a href="#nextmatch">next match</a>)</p>
                        }
                        else
                        {
                            <p>@Model.EventState.ToString() are running on time (<a href="#nextmatch">next match</a>)</p>
                        }
                    }
                }

                if (Model.TeamsOfInterest != null && Model.TeamsOfInterest.Count > 0 && Model.EventState != FRCEventState.Future && Model.EventState != FRCEventState.Invalid && Model.TeamsOfInterest.Count(t => t.eventRank > 0) > 0)
                {
                    @* TODO: <div>Sort by: <a href="">rank</a> | <a href="">CCWM</a></div>*@
                    foreach (RegisteredTeam registeredTeam in Model.TeamsOfInterest.Where(t => t.eventRank > 0).OrderBy(t => t.eventRank))
                    {
                        <div style="margin-top:0.5rem">
                            @if (Model.EventState != FRCEventState.Future && Model.EventState != FRCEventState.Invalid)
                            {
                                <div>
                                    @registeredTeam.number @registeredTeam.nameShort
                                    (<span><a href="https://frc-events.firstinspires.org/2019/@(Model.FrcEvent.code)/rankings">#@registeredTeam.eventRank</a></span>)
                                    <sup style="font-size:small">[<a href="@(Model.TeamOfInterestUrl(Model.FrcEvent.code, registeredTeam.number, "remove"))" style="color:red">x</a>]</sup>
                                </div>

                                if (registeredTeam.Stats != null && registeredTeam.Stats.oprs != null && registeredTeam.Stats.oprs.ContainsKey("frc" + registeredTeam.number))
                                {
                                    <div style="font-size:11px;">
                                        OPR: @Math.Round(registeredTeam.Stats.oprs["frc" + registeredTeam.number.ToString()], 2),
                                        DPR: @Math.Round(registeredTeam.Stats.dprs["frc" + registeredTeam.number.ToString()], 2),
                                        CCWM: @Math.Round(registeredTeam.Stats.ccwms["frc" + registeredTeam.number.ToString()], 2)
                                    </div>
                                }

                                if (registeredTeam.NextMatch != null)
                                {
                                    Match nextMatch = registeredTeam.NextMatch;
                                    <div style="font-size:11px;">
                                        Next match: <a href="#@(nextMatch.tournamentLevel + nextMatch.matchNumber)">@nextMatch.title</a>
                                        (@nextMatch.startTime.ToString("ddd M/d h:mm"), <i>est. @nextMatch.startTime.AddMinutes(Model.ScheduleOffset).ToString("h:mm")</i>)
                                    </div>
                                }
                            }
                            else
                            {
                                <div>Team @registeredTeam.number @registeredTeam.nameShort (District #@registeredTeam.districtRank)</div>
                            }
                        </div>
                    }
                }
                else if (Model.EventState != FRCEventState.Future && Model.EventState != FRCEventState.Invalid)
                {
                    <p><i>Tap team numbers to watch/unwatch</i></p>
                }
            }
        </div>
    </div>
}

@if (Model != null && Model.Matches != null && Model.Matches.Count > 0)
{
    <div style="margin-top: 0px">
        @{
            Boolean inFuture = false;
            DateTime currentDate = DateTime.MinValue;
        <table style="width: 100%">
            @foreach (Match match in Model.Matches)
            {
                if (match.title == "Qualification 1" || match.title == "Quarterfinal 1-1" || match.title == "Semifinal 1-1" || match.title == "Final 1")
                {
                    <tr><td colspan="5" style="padding:0"><a name="@(match.title.Substring(0, match.title.IndexOf(" ")))s"></a><div class="followMeBar">@(match.title.Substring(0, match.title.IndexOf(" ")))s</div></td></tr>
                }

                if (match.startTime.Date > currentDate)
                {
                    if (currentDate > DateTime.MinValue)
                    {
                        <tr><td colspan="5" style="height: 3px; border-top-style: dashed"></td></tr>
                    }
                    currentDate = match.startTime.Date;
                }

                if (match.actualStartTime == null && !inFuture)
                {
                    inFuture = true;
                    <tr><td colspan="5" style="color: white; background-color: #666699; text-align: left; font-size: small;"><a name="nextmatch"></a>&nbsp;next match &#8628;</td></tr>
                }

                List<Team> redAlliance = match.teams.Where(t => t.station.StartsWith("Red")).ToList();
                List<Team> blueAlliance = match.teams.Where(t => t.station.StartsWith("Blue")).ToList();

                Dictionary<int, string> teamClasses = new Dictionary<int, string>();
                Dictionary<int, string> teamActions = new Dictionary<int, string>();

                foreach (Team team in match.teams)
                {
                    List<string> classes = new List<string>();
                    if (Model.TeamsOfInterest.Count(t => t.number == team.number) > 0)
                    {
                        classes.Add("teamOfInterest");
                        if (team.station.StartsWith("Red")) { classes.Add("redInvert"); }
                        else { classes.Add("blueInvert"); }

                        teamActions[team.number] = "remove";
                    }
                    else { teamActions[team.number] = "add"; }

                    if (team.dq != null && team.dq.Value) { classes.Add("disqualified"); }

                    if (team.surrogate) { classes.Add("surrogate"); }

                    if (classes.Count > 0)
                    { teamClasses[team.number] = " class=\"" + String.Join(" ", classes) + "\""; }
                    else
                    { teamClasses[team.number] = string.Empty; }
                }
                <tr>
                    <td style="text-align: center">
                        <div><a href="@match.matchDetailsUrl">@match.title</a></div>
                        <div style="font-size: x-small">
                            @match.startTime.ToString("ddd M/d h:mm")
                            @if (match.actualStartTime != null)
                            {
                                <span>(@match.actualStartTime.Value.ToString("h:mm"))</span>
                            }
                            else if (Model.EventState != FRCEventState.Future)
                            {
                                <span><i>(est. @match.startTime.AddMinutes(Model.ScheduleOffset).ToString("h:mm"))</i></span>
                            }
                        </div>
                    </td>
                    <td class="red">
                        <a name="@(match.tournamentLevel + match.matchNumber)"></a>
                        @TeamListing(redAlliance[0].number, match.eventCode, teamClasses, teamActions)
                        @TeamListing(redAlliance[1].number, match.eventCode, teamClasses, teamActions)
                        @TeamListing(redAlliance[2].number, match.eventCode, teamClasses, teamActions)
                    </td>
                    @{
                        string scoreRed = "&nbsp;&nbsp;&nbsp;";
                        string scoreBlue = "&nbsp;&nbsp;&nbsp;";
                        if (match.actualStartTime != null)
                        {
                            scoreRed = match.scoreRedFinal.ToString();
                            scoreBlue = match.scoreBlueFinal.ToString();
                        }
                        string scoreWin = "Invert scoreWin";
                    }
                    <td class="@((match.scoreRedFinal > match.scoreBlueFinal) ? "red" + scoreWin : "red")">@Html.Raw(scoreRed)</td>
                    <td class="@((match.scoreRedFinal < match.scoreBlueFinal) ? "blue" + scoreWin : "blue")">@Html.Raw(scoreBlue)</td>
                    <td class="blue">
                        @TeamListing(blueAlliance[0].number, match.eventCode, teamClasses, teamActions)
                        @TeamListing(blueAlliance[1].number, match.eventCode, teamClasses, teamActions)
                        @TeamListing(blueAlliance[2].number, match.eventCode, teamClasses, teamActions)
                    </td>
                </tr>
            }
        </table>
        }
    </div>

    if (Model.Bracket != null && (Model.EventState == FRCEventState.Quarterfinals || Model.EventState == FRCEventState.Semifinals || Model.EventState == FRCEventState.Finals || Model.EventState == FRCEventState.Past))
    {
        <div style="margin-top: 15px">
            @Html.Partial("PlayoffBrackets", Model)
        </div>
    }

    <p style="font-size: 11px; font-style:italic; margin-top: 15px">Times should be local to the event and estimates are calculated to best of our ability - trust what you see and hear on-site.</p>
}

@helper TeamListing(int teamNumber, string eventCode, Dictionary<int, string> classes, Dictionary<int, string> actions)
{
    if (teamNumber > 0)
    {
        <div @Html.Raw(classes[teamNumber])><a href="@(Model.TeamOfInterestUrl(eventCode, teamNumber, actions[teamNumber]))" style="color:inherit">@teamNumber<span class="teamName"> @Model.RegisteredTeams.Where(t => t.number == teamNumber).FirstOrDefault().nameShort</span></a></div>
    }
}