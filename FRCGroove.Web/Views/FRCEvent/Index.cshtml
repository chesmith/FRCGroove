@using FRCGroove.Lib.Models
@using FRCGroove.Web.Models
@model FRCGroove.Web.Models.Dashboard

@{
    string eventName = string.Empty;
    if (Model != null && Model.TBAEvent != null)
    {
        eventName = $" - {Model.TBAEvent.name}";
    }
    ViewBag.Title = $"FRC Groove{eventName}";
}

@{
    var eventCode = "Invalid";
    if (Model != null && Model.TBAEvent != null && Model.EventState != FRCEventState.Invalid)
    {
        eventCode = Model.TBAEvent.key;
    }
}

<script>
    if (typeof gtag != "undefined") gtag('event', 'event', { 'event_category': 'Event', 'event_action': 'view', 'event_label': '@eventCode' });
</script>

@Html.Partial("Navigation", "Matches")

@if (Model != null)
{
    <div class="card" style="border-bottom-left-radius:0;border-bottom-right-radius:0">
        @if (Model.TBAEvent != null)
        {
            <div class="card-header" style="margin-bottom:0;padding: 0.5rem">
                <h6 style="margin-bottom:0">@Model.TBAEvent.name</h6>
                <div style="width:100%;font-size:0.75rem">
                    <span style="float:left">@Model.TBAEvent.dateStart.ToString("ddd M/d") to @Model.TBAEvent.dateEnd.ToString("ddd M/d")</span>
                    <span id="refresh" style="float:right"><a class="fas fa-redo" style="color:white" href="javascript:window.location.reload(true);"></a></span>
                </div>
            </div>
        }

        <ul class="list-group list-group-flush">
            <li class="list-group-item" style="padding:0.5rem 0.75rem 0.5rem 0.75rem">
                @if (Model.EventState == FRCEventState.Past)
                {
                    <span>Event is complete (<a href="#Semifinals">playoffs</a> / <a href="#Brackets">brackets</a>)</span>
                }
                else if (Model.EventState == FRCEventState.Future)
                {
                    <span>Match schedule not yet available</span>
                }
                else if (Model.EventState == FRCEventState.Invalid)
                {
                    <span>This appears to be an invalid event code<br />(<a href="/">return to event listing</a>)</span>
                }
                else
                {
                    if (Model.EventState == FRCEventState.Qualifications && Model.TBAMatches != null && Model.TBAMatches.Count(m => m.comp_level == "qm" && m.score_breakdown != null) == 0)
                    {
                        <span>Qualifications haven't started</span>
                    }
                    else if ((Model.EventState == FRCEventState.Qualifications && Model.TBAMatches != null && Model.TBAMatches.Count(m => m.comp_level == "qm" && m.score_breakdown == null) == 0) || (Model.EventState == FRCEventState.Quarterfinals && Model.TBAMatches.Count(m => m.comp_level == "qf" && m.score_breakdown != null) == 0))
                    {
                        <span>
                            Qualifications have completed - waiting for playoffs to begin
                            @if (Model.TBAMatches.Count(m => m.comp_level == "qf") > 0)
                            {<span>(<a href="#nextmatch">next match</a>)</span>}
                        </span>
                    }
                    else if (Model.EventState == FRCEventState.Qualifications || Model.EventState == FRCEventState.Quarterfinals || Model.EventState == FRCEventState.Semifinals || Model.EventState == FRCEventState.Finals)
                    {
                        int scheduleOffset = (int)Math.Round(Model.ScheduleOffset, 0);
                        string offsetColor = (scheduleOffset > 0 ? "#7c0a0a" : "#046705");
                        string offsetBehindAhead = (scheduleOffset > 0 ? "behind" : "ahead");
                        if (scheduleOffset == 0)
                        {
                            <span>@Model.EventState.ToString() seem to be running on time<span style="color:red">*</span> (<a href="#nextmatch">next match</a>)</span>
                        }
                        else
                        {
                            <span style="font-style:italic; color:@offsetColor;">@Model.EventState.ToString() are running about @Math.Abs(scheduleOffset) minute@(Math.Abs(scheduleOffset) > 1 ? "s" : "") @offsetBehindAhead (<a href="#nextmatch">next match</a>)</span>
                        }
                    }
                }
            </li>
            <li class="list-group-item" style="padding:0.5rem 0.75rem 0.5rem 0.75rem">
                @{
                    bool tapHint = true;
                    if (Model.EventState != FRCEventState.Future && !(Model.EventState == FRCEventState.Qualifications && Model.TBAMatches.Count(m => m.actual_time != 0) == 0))
                    {
                        tapHint = (Model.TeamsOfInterest.Count == 0 && Model.EventState != FRCEventState.Future && Model.EventState != FRCEventState.Invalid);
                    }
                }

                <span id="tapHint" style="font-size:0.75rem; display:@(tapHint ? "inline": "none")"><i>Tap team numbers to watch/unwatch - stats will display here once matches have started</i></span>

                <div id="teamSort" style="display:none">
                    <a href="javascript:;">Rank</a> <i id="sortRank" class="fas fa-sort-up" style="display:inline"></i> |
                    <a href="javascript:;">OPR</a> <i id="sortOPR" style="display:none"></i> |
                    <a href="javascript:;">DPR</a> <i id="sortDPR" style="display:none"></i> |
                    <a href="javascript:;">CCWM</a> <i id="sortCCWM" style="display:none"></i>
                </div>

                <div id="watchlist" style="height:@(Model.EventState != FRCEventState.Future && !(Model.TBAMatches != null && Model.TBAMatches.Count(m => m.actual_time != 0) == 0) ? Model.TeamsOfInterest.Count * 47 : 0)px"></div>

                <script type="text/javascript">
                    var loadTime = new Date();
                    var refreshPrompt = setInterval(PromptForRefresh, 1000);

                    var eventState = "@Model.EventState";
                    var matches = @(Model.TBAMatches == null ? 0 : Model.TBAMatches.Count(m => m.actual_time != 0));

                    var teamList = "@string.Join(",", Model.TeamsOfInterest.Select(t => t.teamNumber))";
                    var sortName = "Rank";
                    var prevSortName = "Rank";
                    var sortDirection = "ASC";
                    $(function () {
                        RefreshTeams();
                    });
                    $("body").on("click", "#teamSort a", function () {
                        sortName = $(this).html();
                        if (sortName == prevSortName)
                            sortDirection = sortDirection == "ASC" ? "DESC" : "ASC";
                        else if (sortName == "Rank")
                            sortDirection = "ASC";
                        else
                            sortDirection = "DESC";
                        RefreshTeams();
                        prevSortName = sortName;
                    });
                    function RefreshTeams() {
                        $.ajax({
                        type: "POST",
                            url: "/FRCEvent/TeamsOfInterestAjax",
                            data: '{"eventCode": "@eventCode", "teamList": "' + teamList + '", "sortName": "' + sortName + '", "sortDirection": "' + sortDirection + '"}',
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: OnSuccess,
                            failure: function (response) {
                                OnFailure();
                                console.log("failed to get teams: " + response.d);
                            },
                            error: function (response) {
                                OnFailure();
                                console.log("error getting teams: " + response.d);
                            }
                        });
                    };
                    function OnSuccess(response) {
                        var model = response;
                        $("#watchlist").empty();
                        $("#watchlist").removeAttr("style");
                        $.each(model, function () {
                            var team = this;
                            if (team.eventRank > -1)
                            {
                                var teamListing = '<div style="margin-top:0.5rem">';
                                teamListing += '<div>' + team.teamNumber + ' ' + team.nameShort;
                                teamListing += ' (<span><a href="https://www.thebluealliance.com/event/@eventCode#rankings" target="_blank" rel="noopener noreferrer">#' + team.eventRank + '</a></span>) ';
                                teamListing += '<sup style="font-size:small; cursor:pointer" onclick="javascript:ToggleWatch(' + team.teamNumber + ');">[<span style="color:red">x</span>]</sup></div>';
                                if (team.Stats != null) {
                                    teamListing += '<div style="font-size:11px;">OPR: ' + team.Stats.OPR + ', DPR: ' + team.Stats.DPR + ', CCWM: ' + team.Stats.CCWM + '</div></div>';
                                }
                                $("#watchlist").append(teamListing);
                            }
                        });

                        $("[id^=sort]").each(function () { $(this).removeAttr("class") });
                        $("[id^=sort]").each(function () { $(this).attr("style", "display:none") });

                        if (sortDirection == "ASC")
                            $("#sort" + sortName).attr("class", "fas fa-sort-up");
                        else
                            $("#sort" + sortName).attr("class", "fas fa-sort-down");
                        $("#sort" + sortName).attr("style", "display:inline");

                        stickyHeaders.load($(".followMeBar"));

                        var teams = teamList.split(",");
                        var teamsToKeep = [];
                        $.each(teams, function (index, value) {
                            if (value.indexOf("x") == -1) {
                                teamsToKeep.push(value);
                            }
                        });
                        teamsToKeep.sort((a, b) => parseInt(a) - parseInt(b));
                        teamList = teamsToKeep.join(",");

                        if (eventState != "Future" && !(eventState == "Qualifications" && matches == 0)) {
                            if (teamList.length > 0 && TeamsInThisEvent(teamList) > 0) {
                                $("#teamSort").css("display", "inline");
                                $("#tapHint").css("display", "none");
                            }
                            else {
                                $("#teamSort").css("display", "none");
                                $("#tapHint").css("display", "inline");
                            }
                        }
                        if (typeof gtag != "undefined") gtag('event', 'stats', { 'event_category': 'Team', 'event_action': 'stats', 'event_label': teamList });
                    };
                    function OnFailure() {
                        $("#watchlist").empty();
                        $("#watchlist").removeAttr("style");
                        $("#watchlist").append('<span style="color:darkred;font-style:italic">Unable to retrive watchlist</span>');
                    };
                    function TeamsInThisEvent(list) {
                        var teams = list.split(',');
                        var count = 0;
                        $.each(teams, function (index, teamNumber) {
                            if ($("[id^=tm" + teamNumber + "-]").length > 0) {
                                count++;
                            }
                        });
                        return count;
                    };
                    function PromptForRefresh() {
                        var elapsed = new Date() - loadTime;
                        if (elapsed > 600000) {
                            $("#refresh a").css("font-size", "1.25rem").css("color", "red");
                            clearInterval(refreshPrompt);
                        } else if (elapsed > 300000) {
                            $("#refresh").attr("class", "animate-flicker");
                        }
                    }
                </script>
            </li>
        </ul>
    </div>
}

@if (Model != null && Model.TBAMatches != null && Model.TBAMatches.Count > 0)
{
    <div style="margin-top: 0px">
        @{
            Boolean inFuture = false;
            DateTime currentDate = DateTime.MinValue;
            var day1 = Model.TBAMatches.Where(m => m.timeDT.Date == Model.TBAMatches[0].timeDT.Date).ToList();
            var day2 = Model.TBAMatches.Where(m => m.timeDT.Date == Model.TBAMatches[0].timeDT.Date.AddDays(1)).ToList();
            var day2Date = DateTime.MinValue;
            if (day2 != null && day2.Count > 0) { day2Date = day2[0].timeDT.Date; }
            int? day2FirstMatch = day2[0]?.match_number;
            <table style="width: 100%">
                @foreach (TBAMatchData match in Model.TBAMatches)
                {
                    if (match.set_number == 1 && match.match_number == 1)
                    {
                        <tr><td colspan="5" style="padding:0"><a name="@(match.title.Substring(0, match.title.IndexOf(" ")))s"></a><div class="followMeBar">@(match.title.Substring(0, match.title.IndexOf(" ")))s</div></td></tr>
                    }

                    if (match.timeDT.Date > currentDate)
                    {
                        if (currentDate > DateTime.MinValue)
                        {
                            <tr><td colspan="5" style="height: 3px; border-top-style: dashed"></td></tr>
                        }
                        currentDate = match.timeDT.Date;
                    }

                    if (match.actual_time == 0 && !inFuture)
                    {
                        inFuture = true;
                        <tr><td colspan="5" style="color: white; background-color: #666699; text-align: left; font-size: small;"><a name="nextmatch"></a>&nbsp;next match &#8628;</td></tr>
                    }

                    //TODO: maybe move this into the helper function?
                    Dictionary<int, string> teamClasses = new Dictionary<int, string>();
                    Dictionary<int, string> teamActions = new Dictionary<int, string>();

                    foreach (string teamKey in match.alliances.red.team_keys)
                    {
                        List<string> classes = new List<string>();
                        int teamNumber = Int32.Parse(teamKey.Substring(3));
                        if (Model.TeamsOfInterest.Count(t => t.teamNumber == teamNumber) > 0)
                        {
                            classes.Add("redHighlight");
                            teamActions[teamNumber] = "remove";
                        }
                        else { teamActions[teamNumber] = "add"; }

                        if (match.alliances.red.dq_team_keys.Contains(teamKey)) { classes.Add("disqualified"); }

                        if (match.alliances.red.surrogate_team_keys.Contains(teamKey)) { classes.Add("surrogate"); }

                        if (classes.Count > 0)
                        { teamClasses[teamNumber] = " class=\"" + String.Join(" ", classes) + "\""; }
                        else
                        { teamClasses[teamNumber] = string.Empty; }
                    }

                    foreach (string teamKey in match.alliances.blue.team_keys)
                    {
                        List<string> classes = new List<string>();
                        int teamNumber = Int32.Parse(teamKey.Substring(3));
                        if (Model.TeamsOfInterest.Count(t => t.teamNumber == teamNumber) > 0)
                        {
                            classes.Add("blueHighlight");
                            teamActions[teamNumber] = "remove";
                        }
                        else { teamActions[teamNumber] = "add"; }

                        if (match.alliances.blue.dq_team_keys.Contains(teamKey)) { classes.Add("disqualified"); }

                        if (match.alliances.blue.surrogate_team_keys.Contains(teamKey)) { classes.Add("surrogate"); }

                        if (classes.Count > 0)
                        { teamClasses[teamNumber] = " class=\"" + String.Join(" ", classes) + "\""; }
                        else
                        { teamClasses[teamNumber] = string.Empty; }
                    }

                    List<int> redAlliance = match.alliances.red.team_keys.Select(v => Int32.Parse(v.Substring(3))).ToList();
                    List<int> blueAlliance = match.alliances.blue.team_keys.Select(v => Int32.Parse(v.Substring(3))).ToList();

                    <tr>
                        <td style="text-align: center">
                            <div><a href="@match.matchDetailsUrl">@match.title</a></div>
                            <div style="font-size: x-small">
                                @match.timeDT.ToString("ddd M/d h:mm")
                                @{
                                    double offset = Model.ScheduleOffset;
                                    if (match.match_number > day2FirstMatch && DateTime.Now.Date < day2Date) { offset = 0; }
                                }
                                @if (match.actual_time != 0)
                                {
                                    <span>(@match.actual_timeDT.ToString("h:mm"))</span>
                                }
                                else if (Model.EventState != FRCEventState.Future)
                                {
                                    <span><i>(est. @match.timeDT.AddMinutes(offset).ToString("h:mm"))</i></span>
                                }
                            </div>
                        </td>
                        <td class="red">
                            <a name="@(match.comp_level + match.match_number)"></a>
                            @TeamListing(redAlliance[0], match, teamClasses, teamActions)
                            @TeamListing(redAlliance[1], match, teamClasses, teamActions)
                            @TeamListing(redAlliance[2], match, teamClasses, teamActions)
                        </td>
                        @ScoreBreakdown(match)
                        <td class="blue">
                            @TeamListing(blueAlliance[0], match, teamClasses, teamActions)
                            @TeamListing(blueAlliance[1], match, teamClasses, teamActions)
                            @TeamListing(blueAlliance[2], match, teamClasses, teamActions)
                        </td>
                    </tr>
                }
            </table>
        }
    </div>

    if (Model.Bracket != null && (Model.EventState == FRCEventState.Quarterfinals || Model.EventState == FRCEventState.Semifinals || Model.EventState == FRCEventState.Finals || Model.EventState == FRCEventState.Past) && eventCode != "CMPTX")
    {
        <div style="margin-top: 15px">
            @Html.Partial("PlayoffBrackets", Model)
        </div>
    }

    <p style="font-size: 0.75rem; font-style:italic; margin-top: 0.5rem"><span style="color:red">*</span> Times should be local to the event and estimates are calculated to best of our ability - trust what you see and hear on-site.</p>
}

@helper ScoreBreakdown(TBAMatchData match)
{
    int totalRed = 0;
    int totalBlue = 0;

    if (match.actual_time > 0 && match.score_breakdown != null)
    {
        totalRed = match.score_breakdown.red.totalPoints;
        totalBlue = match.score_breakdown.blue.totalPoints;
        <td class="@((totalRed > totalBlue) ? "redHighlight" : "red")">@Html.Raw(totalRed)</td>
        <td class="@((totalRed < totalBlue) ? "blueHighlight" : "blue")">@Html.Raw(totalBlue)</td>
    }
    else
    {
        <td></td>
        <td></td>
    }
}

@helper TeamListing(int teamNumber, TBAMatchData match, Dictionary<int, string> classes, Dictionary<int, string> actions)
{
    if (teamNumber > 0)
    {
        <div id="tm@(teamNumber)-@(match.comp_level)-@(match.match_number)" @Html.Raw(classes[teamNumber])>
            <span>@teamNumber</span>
            @if (Model.EventRankings.ContainsKey(teamNumber))
            {
                <span class="teamRank"> (#@Model.EventRankings[teamNumber].rank)</span>
            }
            <span class="teamName">@(Model.RegisteredTeams.ContainsKey(teamNumber) ? Model.RegisteredTeams[teamNumber].nameShort : "")</span>
        </div>
    }
}

<script type="text/javascript">
    $("[id^=tm]").click(function () {
        var id = $(this).attr('id');
        var teamNumber = id.substring(2, id.indexOf('-'));
        ToggleWatch(teamNumber)
    });
    function ToggleWatch(teamNumber) {
        var entries = $("[id^=tm" + teamNumber + "-]");
        var action = '';
        $.each(entries, function () {
            var weight = $(this).css('font-weight');
            if (weight == 400) {
                var color = $(this).css('color');
                if (color.startsWith('rgb(255'))
                    color = 'red';
                else
                    color = 'blue';
                $(this).addClass(color + 'Highlight');
                $(this).css('font-weight', '700');
                action = 'add';
            }
            else {
                var color = $(this).css('background-color');
                if (color.startsWith('rgb(255'))
                    color = 'red';
                else
                    color = 'blue';
                $(this).removeClass(color + 'Highlight');
                $(this).css('font-weight', '400');
                action = 'remove';
            }
        });
        if (typeof gtag != "undefined") gtag('event', 'watch', { 'event_category': 'Team', 'event_action': action, 'event_label': teamNumber });
        if (action == 'add') {
            if (teamList.length > 0) teamList += ",";
            teamList += teamNumber;
            if (eventState != "Future" && matches > 0) {
                var h = $("#watchlist").height();
                $("#watchlist").height(h + 47);
            }
        }
        else
            teamList = teamList.replace(teamNumber, "x" + teamNumber);

        //var teams = teamList.split(",");
        //var distinctTeams = [];
        //$.each(teams, function () {
        //    if ($.inArray($(this), distinctTeams) > -1) {
        //        // do nothing
        //        alert("already exists " + $(this));
        //    } else {
        //        distinctTeams.push($(this));
        //    }
        //});
        //alert(distinctTeams.join(","));

        RefreshTeams();
    }
</script>
