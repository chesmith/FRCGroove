@using FRCGroove.Lib.models
@using FRCGroove.Web.Models
@model FRCGroove.Web.Models.Dashboard

@{
    string eventName = string.Empty;
    if (Model != null && Model.FrcEvent != null)
    {
        eventName = $" - {Model.FrcEvent.name}";
    }
    ViewBag.Title = $"FRC Groove{eventName}";
}

<div>
    @if (Model != null)
    {
        if (Model.FrcEvent != null)
        {
            ViewBag.Title += " - " + Model.FrcEvent.name;
            <p>
                <table style="border:none">
                    <tr style="font-weight:bold; font-size:17px; vertical-align:top"><td style="border:none; text-align:left; font-size:28px" rowspan="2"><a href="/">&#9668;</a>&nbsp;</td><td style="border:none; text-align:left">@Model.FrcEvent.name</td></tr>
                    <tr><td style="font-size:11px; margin-left:2.0em; border:none; text-align:left">(@Model.FrcEvent.dateStart.ToString("ddd M/d") to @Model.FrcEvent.dateEnd.ToString("ddd M/d"))</td></tr>
                </table>
            </p>
        }

        if (Model.EventState == FRCEventState.Past)
        {
            <p>Event appears to be complete - <a href="#Quarterfinals">playoffs</a> / <a href="#Brackets">brackets</a></p>
        }
        else if (Model.EventState == FRCEventState.Future)
        {
            <p>Matches schedule not yet available</p>
        }
        else if (Model.EventState == FRCEventState.Invalid)
        {
            <p>This appears to be an invalid event code<br />(<a href="/">return to event listing</a>)</p>
        }
        else
        {
            if (Model.EventState == FRCEventState.Qualifications && Model.Matches != null && Model.Matches.Count(m => m.tournamentLevel == "Qualification" && m.actualStartTime == null) == 0)
            {
                <p>Qualifications have completed - waiting for playoffs to begin</p>
            }
            else if (Model.EventState == FRCEventState.Quarterfinals || Model.EventState == FRCEventState.Semifinals || Model.EventState == FRCEventState.Finals)
            {
                <p>@Model.EventState.ToString() are in progress (<a href="#@Model.EventState.ToString()">go there now</a>)</p>
            }
            else if (Model.EventState == FRCEventState.Qualifications && Model.Matches.Count(m => m.actualStartTime != null) == 0)
            {
                <p>Qualifications haven't started</p>
            }
            else if (Model.EventState == FRCEventState.Qualifications)
            {
                <p>Qualifications are in progress</p>
            }

            int scheduleOffset = (int)Math.Round(Model.ScheduleOffset, 0);
            if (scheduleOffset < 0)
            {
                <p style="font-style:italic"><span style="color:#046705;">Running about @Math.Abs(scheduleOffset) minute@(Math.Abs(scheduleOffset) > 1 ? "s" : "") ahead</span> (<a href="#nextmatch">next match</a>)</p>
            }
            else if (scheduleOffset > 0)
            {
                <p style="font-style: italic"><span style="color:#7c0a0a; font-style:italic">Running about @Math.Abs(scheduleOffset) minute@(Math.Abs(scheduleOffset) > 1 ? "s" : "") behind</span> (<a href="#nextmatch">next match</a>)</p>
            }
        }

        if (Model.TeamsOfInterest != null && Model.TeamsOfInterest.Count > 0 && Model.EventState != FRCEventState.Invalid)
        {
            foreach (RegisteredTeam registeredTeam in Model.TeamsOfInterest)
            {
                <p>
                    @if (Model.EventState != FRCEventState.Future && Model.EventState != FRCEventState.Invalid)
                    {
                        <div>
                            @registeredTeam.number @registeredTeam.nameShort
                            (@if (registeredTeam.eventRank > 0)
                            {<span>Event <a href="https://frc-events.firstinspires.org/2019/@(Model.FrcEvent.code)/rankings">#@registeredTeam.eventRank</a> / </span>}District <a href="https://frc-events.firstinspires.org/2019/district/@(registeredTeam.districtCode)#rankings">#@registeredTeam.districtRank</a>)
                            <sup style="font-size:small">[<a href="@(Model.TeamOfInterestUrl(Model.FrcEvent.code, registeredTeam.number, "remove"))" style="color:red">x</a>]</sup>
                        </div>

                        if (registeredTeam.Stats != null && registeredTeam.Stats.oprs.ContainsKey("frc" + registeredTeam.number))
                        {
                            <div style="font-size:11px;">
                                OPR: @Math.Round(registeredTeam.Stats.oprs["frc" + registeredTeam.number.ToString()], 2),
                                DPR: @Math.Round(registeredTeam.Stats.dprs["frc" + registeredTeam.number.ToString()], 2),
                                CCWM: @Math.Round(registeredTeam.Stats.ccwms["frc" + registeredTeam.number.ToString()], 2)
                            </div>
                        }
                        else if (registeredTeam.eventRank == -1)
                        {
                            <div style="font-size:11px;">Team doesn't appear to be competing at this event</div>
                        }

                        if (registeredTeam.NextMatch != null)
                        {
                            Match nextMatch = registeredTeam.NextMatch;
                            <div style="font-size:11px;">
                                Next match: <a href="#@(nextMatch.tournamentLevel + nextMatch.matchNumber)">@nextMatch.title</a>
                                (@nextMatch.startTime.ToString("ddd M/d h:mm"), <i>est. @nextMatch.startTime.AddMinutes(Model.ScheduleOffset).ToString("h:mm")</i>)
                            </div>
                        }
                    }
                    else
                    {
                        <div>Team @registeredTeam.number @registeredTeam.nameShort (District #@registeredTeam.districtRank)</div>
                    }
                </p>
            }
        }
        else if (Model.EventState != FRCEventState.Future && Model.EventState != FRCEventState.Invalid)
        {
            <p><i>Tap team numbers to watch/unwatch</i></p>
        }
    }
</div>

<div style="margin-top: 15px">
    @if (Model != null && Model.Matches != null && Model.Matches.Count > 0)
    {
        Boolean inFuture = false;
        DateTime currentDate = DateTime.MinValue;
        <table style="width: 100%">
            @foreach (Match match in Model.Matches)
            {
                if (match.startTime.Date > currentDate)
                {
                    if (currentDate > DateTime.MinValue)
                    {
                        <tr><td colspan="5" style="height: 3px; border-top-style: dashed"></td></tr>
                    }
                    currentDate = match.startTime.Date;
                }

                if (match.title == "Qualification 1" || match.title == "Quarterfinal 1-1" || match.title == "Semifinal 1-1" || match.title == "Final 1")
                {
                    <tr><td colspan="5"><a name="@(match.title.Substring(0, match.title.IndexOf(" ")))s"></a><div class="followMeBar">@(match.title.Substring(0, match.title.IndexOf(" ")))s</div></td></tr>
                }

                if (match.actualStartTime == null && !inFuture)
                {
                    inFuture = true;
                    <tr><td colspan="5" style="color: white; background-color: #666699; text-align: left; font-size: small;"><a name="nextmatch"></a>&nbsp;next match &#8628;</td></tr>
                }

                List<Team> redAlliance = match.teams.Where(t => t.station.StartsWith("Red")).ToList();
                List<Team> blueAlliance = match.teams.Where(t => t.station.StartsWith("Blue")).ToList();

                Dictionary<int, string> teamClasses = new Dictionary<int, string>();
                Dictionary<int, string> teamActions = new Dictionary<int, string>();

                foreach (Team team in match.teams)
                {
                    List<string> classes = new List<string>();
                    if (Model.TeamsOfInterest.Count(t => t.number == team.number) > 0)
                    {
                        classes.Add("teamOfInterest");
                        if (team.station.StartsWith("Red")) { classes.Add("redInvert"); }
                        else { classes.Add("blueInvert"); }

                        teamActions[team.number] = "remove";
                    }
                    else { teamActions[team.number] = "add"; }

                    if (team.dq != null && team.dq.Value) { classes.Add("disqualified"); }

                    if (team.surrogate) { classes.Add("surrogate"); }

                    if (classes.Count > 0)
                    { teamClasses[team.number] = " class=\"" + String.Join(" ", classes) + "\""; }
                    else
                    { teamClasses[team.number] = string.Empty; }
                }
                <tr>
                    <td style="text-align: center">
                        <div><a href="@match.matchDetailsUrl">@match.title</a></div>
                        <div style="font-size: x-small">
                            @match.startTime.ToString("ddd M/d h:mm")
                            @if (match.actualStartTime != null)
                            {
                                <span>(@match.actualStartTime.Value.ToString("h:mm"))</span>
                            }
                            else if (Model.EventState != FRCEventState.Future)
                            {
                                <span><i>(est. @match.startTime.AddMinutes(Model.ScheduleOffset).ToString("h:mm"))</i></span>
                            }
                        </div>
                    </td>
                    <td class="red">
                        <a name="@(match.tournamentLevel + match.matchNumber)"></a>
                        <div @Html.Raw(teamClasses[redAlliance[0].number])><a href="@(Model.TeamOfInterestUrl(match.eventCode, redAlliance[0].number, teamActions[redAlliance[0].number]))" style="color:inherit">@redAlliance[0].number</a></div>
                        <div @Html.Raw(teamClasses[redAlliance[1].number])><a href="@(Model.TeamOfInterestUrl(match.eventCode, redAlliance[1].number, teamActions[redAlliance[1].number]))" style="color:inherit">@redAlliance[1].number</a></div>
                        <div @Html.Raw(teamClasses[redAlliance[2].number])><a href="@(Model.TeamOfInterestUrl(match.eventCode, redAlliance[2].number, teamActions[redAlliance[2].number]))" style="color:inherit">@redAlliance[2].number</a></div>
                    </td>
                    @{
                        string scoreRed = "&nbsp;&nbsp;&nbsp;";
                        string scoreBlue = "&nbsp;&nbsp;&nbsp;";
                        if (match.actualStartTime != null)
                        {
                            scoreRed = match.scoreRedFinal.ToString();
                            scoreBlue = match.scoreBlueFinal.ToString();
                        }
                        string scoreWin = "Invert scoreWin";
                    }
                    <td class="@((match.scoreRedFinal > match.scoreBlueFinal) ? "red" + scoreWin : "red")">@Html.Raw(scoreRed)</td>
                    <td class="@((match.scoreRedFinal < match.scoreBlueFinal) ? "blue" + scoreWin : "blue")">@Html.Raw(scoreBlue)</td>
                    <td class="blue">
                        <div @Html.Raw(teamClasses[blueAlliance[0].number])><a href="@(Model.TeamOfInterestUrl(match.eventCode, blueAlliance[0].number, teamActions[blueAlliance[0].number]))" style="color:inherit">@blueAlliance[0].number</a></div>
                        <div @Html.Raw(teamClasses[blueAlliance[1].number])><a href="@(Model.TeamOfInterestUrl(match.eventCode, blueAlliance[1].number, teamActions[blueAlliance[1].number]))" style="color:inherit">@blueAlliance[1].number</a></div>
                        <div @Html.Raw(teamClasses[blueAlliance[2].number])><a href="@(Model.TeamOfInterestUrl(match.eventCode, blueAlliance[2].number, teamActions[blueAlliance[2].number]))" style="color:inherit">@blueAlliance[2].number</a></div>
                    </td>
                </tr>
            }
        </table>
    }
</div>

<div style="margin-top: 15px">
    @if (Model != null && (Model.EventState == FRCEventState.Quarterfinals || Model.EventState == FRCEventState.Semifinals || Model.EventState == FRCEventState.Finals || Model.EventState == FRCEventState.Past))
    {
        List<Match> playoffs = Model.Matches.Where(m => m.tournamentLevel == "Playoff" && m.title.EndsWith("1")).ToList();
        Dictionary<int, string> teamClasses = new Dictionary<int, string>();
        foreach (Match playoff in playoffs)
        {
            foreach (Team team in playoff.teams)
            {
                if (Model.TeamsOfInterest.Count(t => t.number == team.number) > 0)
                {
                    teamClasses[team.number] = "teamOfInterest";
                }
                else { teamClasses[team.number] = string.Empty; }
            }
        }

        <table style="width: 100%">
            <tr><td colspan="10"><a name="Brackets"></a><div class="followMeBar">Brackets</div></td></tr>
            <tr>
                <td width="16%" style="border-right:none; color:red">
                    @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["qf1-red"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                </td>
                <td style="border-left:none">
                    @if (Model.Bracket.brackets["sf1-red"] != 0 && Model.Bracket.brackets["sf1-red"] == Model.Bracket.brackets["qf1-red"])
                    {<div class="arrow_right"></div>}
                </td>

                <td rowspan="2" width="16%" style="border-right:none; color:red">
                    @if (Model.Bracket.brackets["sf1-red"] != 0)
                    {@Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["sf1-red"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell));
                }
                </td>
                <td rowspan="2" style="border-left:none">
                    @if (Model.Bracket.brackets["f-red"] != 0 && Model.Bracket.brackets["f-red"] == Model.Bracket.brackets["sf1-red"])
                    {<div class="arrow_right"></div>}
                </td>

                <td rowspan="4" width="16%" style="color:red">
                    @if (Model.Bracket.brackets["f-red"] != 0)
                    {@Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["f-red"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell));
                }
                </td>

                <td rowspan="4" width="16%" style="color:blue">
                    @if (Model.Bracket.brackets["f-blue"] != 0)
                    {@Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["f-blue"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell));
                }
                </td>

                <td rowspan="2" style="border-right:none">
                    @if (Model.Bracket.brackets["f-blue"] != 0 && Model.Bracket.brackets["f-blue"] == Model.Bracket.brackets["sf2-red"])
                    {<div class="arrow_left"></div>}
                </td>
                <td rowspan="2" width="16%" style="border-left:none; color:red">
                    @if (Model.Bracket.brackets["sf2-red"] != 0)
                    {@Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["sf2-red"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell));
                }
                </td>

                <td style="border-right:none">
                    @if (Model.Bracket.brackets["sf2-red"] != 0 && Model.Bracket.brackets["sf2-red"] == Model.Bracket.brackets["qf3-red"])
                    {<div class="arrow_left"></div>}
                </td>
                <td width="16%" style="border-left:none; color:red">
                    @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["qf3-red"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                </td>
            </tr>
            <tr>
                <td style="border-right:none; color:red">
                    @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["qf1-blue"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                </td>
                <td style="border-left:none">
                    @if (Model.Bracket.brackets["sf1-red"] != 0 && Model.Bracket.brackets["sf1-red"] == Model.Bracket.brackets["qf1-blue"])
                    {<div class="arrow_right"></div>}
                </td>

                <td style="border-right:none">
                    @if (Model.Bracket.brackets["sf2-red"] != 0 && Model.Bracket.brackets["sf2-red"] == Model.Bracket.brackets["qf3-blue"])
                    {<div class="arrow_left"></div>}
                </td>
                <td style="border-left:none; color:blue">
                    @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["qf3-blue"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                </td>
            </tr>
            <tr>
                <td style="border-right:none; color:red">
                    @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["qf2-red"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                </td>
                <td style="border-left:none">
                    @if (Model.Bracket.brackets["sf1-blue"] != 0 && Model.Bracket.brackets["sf1-blue"] == Model.Bracket.brackets["qf2-red"])
                    {<div class="arrow_right"></div>}
                </td>

                <td rowspan="2" style="border-right:none; color:blue">
                    @if (Model.Bracket.brackets["sf1-blue"] != 0)
                    {@Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["sf1-blue"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell));
                }
                </td>
                <td rowspan="2" style="border-left:none">
                    @if (Model.Bracket.brackets["f-red"] != 0 && Model.Bracket.brackets["f-red"] == Model.Bracket.brackets["sf1-blue"])
                    {<div class="arrow_right"></div>}
                </td>

                <td rowspan="2" style="border-right:none">
                    @if (Model.Bracket.brackets["f-blue"] != 0 && Model.Bracket.brackets["f-blue"] == Model.Bracket.brackets["sf2-blue"])
                    {<div class="arrow_left"></div>}
                </td>
                <td rowspan="2" style="border-left:none; color:blue">
                    @if (Model.Bracket.brackets["sf2-blue"] != 0)
                    {@Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["sf2-blue"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell));
                }
                </td>

                <td style="border-right:none">
                    @if (Model.Bracket.brackets["sf2-blue"] != 0 && Model.Bracket.brackets["sf2-blue"] == Model.Bracket.brackets["qf4-red"])
                    {<div class="arrow_left"></div>}
                </td>
                <td style="border-left:none; color:red">
                    @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["qf4-red"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                </td>
            </tr>
            <tr>
                <td style="border-right:none; color:blue">
                    @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["qf2-blue"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                </td>
                <td style="border-left:none">
                    @if (Model.Bracket.brackets["sf1-blue"] != 0 && Model.Bracket.brackets["sf1-blue"] == Model.Bracket.brackets["qf2-blue"])
                    {<div class="arrow_right"></div>}
                </td>

                <td style="border-right:none">
                    @if (Model.Bracket.brackets["sf2-blue"] != 0 && Model.Bracket.brackets["sf2-blue"] == Model.Bracket.brackets["qf4-blue"])
                    {<div class="arrow_left"></div>}
                </td>
                <td style="border-left:none; color:blue">
                    @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["qf4-blue"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                </td>
            </tr>
        </table>
    }
</div>

@if (Model != null && Model.Matches != null && Model.Matches.Count > 0)
{
    <p style="font-size: 11px; font-style:italic">Times should be local to the event and estimates are calculated to best of our ability, but trust what you see and hear on-site.</p>
}
