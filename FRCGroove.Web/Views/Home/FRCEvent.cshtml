@using FRCGroove.Lib.models
@using FRCGroove.Web.Models
@model FRCGroove.Web.Models.Dashboard

@{
    ViewBag.Title = "FRC Groove";
}

<div>
    @if (Model != null)
    {
        Boolean inFuture = false;
        FRCEventState eventState = Model.EventState;

        if (Model.FrcEvent != null)
        {
            ViewBag.Title += " - " + Model.FrcEvent.name;
            <p>
                <span style="font-weight:bold"><a href="/">&#9668;</a> @Model.FrcEvent.name</span>
                <span style="font-size:x-small">(@Model.FrcEvent.dateStart.ToString("ddd M/d") to @Model.FrcEvent.dateEnd.ToString("ddd M/d"))</span>
            </p>
        }
        if (eventState == FRCEventState.Past)
        {
            <p>Event appears to be complete - <a href="#Quarterfinals">playoffs</a> / <a href="#Brackets">brackets</a></p>
        }
        else if (eventState == FRCEventState.Future)
        {
            <p>Matches haven't started</p>
        }
        else if (eventState == FRCEventState.Invalid)
        {
            <p>This appears to be an invalid event code</p>
        }
        else
        {
            int scheduleOffset = (int)Math.Round(Model.ScheduleOffset, 0);
            if (scheduleOffset < 0)
            {
                <p style="font-style:italic"><span style="color:#046705;">Running about @Math.Abs(scheduleOffset) minutes ahead</span> (<a href="#latest">next match</a>)</p>
            }
            else if (scheduleOffset > 0)
            {
                <p style="font-style: italic"><span style="color:#7c0a0a; font-style:italic">Running about @Math.Abs(scheduleOffset) minutes behind</span> (<a href="#nextmatch">next match</a>)</p>
            }

            if (eventState == FRCEventState.Qualifications)
            {
                <p>Qualification matches are in progress</p>
            }
            else if (eventState == FRCEventState.Finals)
            {
                <p>Finals have begun (<a href="#Finals">go there now</a>)</p>
            }
            else if (eventState == FRCEventState.Semifinals)
            {
                <p>Semifinals have begun (<a href="#Semifinals">go there now</a>)</p>
            }
            else if (eventState == FRCEventState.Quarterfinals)
            {
                <p>Quarterfinals have begun (<a href="#Quarterfinals">go there now</a>)</p>
            }
        }

        foreach (RegisteredTeam registeredTeam in Model.TeamsOfInterest)
        {
            if (eventState != FRCEventState.Future)
            {
                <div>Team @registeredTeam.number @registeredTeam.nameShort (Event #@registeredTeam.eventRank / District <a href="http://frc-districtrankings.firstinspires.org/2019/@registeredTeam.districtCode">#@registeredTeam.districtRank</a>)</div>
                if (registeredTeam.Stats != null && registeredTeam.Stats.oprs.ContainsKey("frc" + registeredTeam.number))
                {
                    <div style="font-size:x-small;">
                        OPR: @Math.Round(registeredTeam.Stats.oprs["frc" + registeredTeam.number.ToString()], 2),
                        DPR: @Math.Round(registeredTeam.Stats.dprs["frc" + registeredTeam.number.ToString()], 2),
                        CCWM: @Math.Round(registeredTeam.Stats.ccwms["frc" + registeredTeam.number.ToString()], 2)
                    </div>
                }
                if (registeredTeam.NextMatch != null)
                {
                    Match nextMatch = registeredTeam.NextMatch;
                    <div style="font-size:x-small;">
                        Next match: <a href="#@(nextMatch.tournamentLevel + nextMatch.matchNumber)">@nextMatch.title</a>
                        @nextMatch.startTime.ToString("ddd M/d h:mm") (est. <i>@nextMatch.startTime.AddMinutes(Model.ScheduleOffset).ToString("h:mm")</i>)
                    </div>
                }
            }
            else
            {
                <div>Team @registeredTeam.number @registeredTeam.nameShort (District #@registeredTeam.districtRank)</div>
            }
            <br />
        }

        if (Model.Matches != null && Model.Matches.Count > 0)
        {
            DateTime currentDate = DateTime.MinValue;
            <table width="100%">
                @foreach (Match match in Model.Matches)
                {
                    if (match.startTime.Date > currentDate)
                    {
                        if (currentDate > DateTime.MinValue)
                        {
                            <tr><td colspan="5" style="height: 3px; border-top-style: dashed"></td></tr>
                        }
                        currentDate = match.startTime.Date;
                    }

                    if (match.title == "Qualification 1" || match.title == "Quarterfinal 1-1" || match.title == "Semifinal 1-1" || match.title == "Final 1")
                    {
                        <tr><td colspan="5"><a name="@(match.title.Substring(0, match.title.IndexOf(" ")))s"></a><div class="followMeBar">@(match.title.Substring(0, match.title.IndexOf(" ")))s</div></td></tr>
                    }

                    if (match.actualStartTime == null && !inFuture)
                    {
                        inFuture = true;
                        <tr><td colspan="5" style="color: white; background-color: #666699; text-align: left; font-size: small;"><a name="nextmatch"></a>&nbsp;next match &#8628;</td></tr>
                    }

                    List<Team> redAlliance = match.teams.Where(t => t.station.StartsWith("Red")).ToList();
                    List<Team> blueAlliance = match.teams.Where(t => t.station.StartsWith("Blue")).ToList();

                    Dictionary<int, string> teamClasses = new Dictionary<int, string>();
                    Dictionary<int, string> teamActions = new Dictionary<int, string>();

                    foreach (Team team in match.teams)
                    {
                        List<string> classes = new List<string>();
                        if (Model.TeamsOfInterest.Where(t => t.number == team.number).Count() > 0)
                        {
                            classes.Add("teamOfInterest");
                            if (team.station.StartsWith("Red")) { classes.Add("redInvert"); }
                            else { classes.Add("blueInvert"); }

                            teamActions[team.number] = "remove";
                        }
                        else { teamActions[team.number] = "add"; }

                        if (team.dq != null && team.dq.Value) { classes.Add("disqualified"); }

                        if (team.surrogate) { classes.Add("surrogate"); }

                        if (classes.Count > 0)
                        { teamClasses[team.number] = " class=\"" + String.Join(" ", classes) + "\""; }
                        else
                        { teamClasses[team.number] = string.Empty; }
                    }
                    <tr>
                        <td style="text-align: center">
                            <div><a href="@match.matchDetailsUrl">@match.title</a></div>
                            <div style="font-size: x-small">
                                @match.startTime.ToString("ddd M/d h:mm")
                                @if (match.actualStartTime != null)
                                {
                                    <span>(@match.actualStartTime.Value.ToString("h:mm"))</span>
                                }
                                else if (eventState != FRCEventState.Future)
                                {
                                    <span><i>(est. @match.startTime.AddMinutes(Model.ScheduleOffset).ToString("h:mm"))</i></span>
                                }
                            </div>
                        </td>
                        <td class="red">
                            <a name="@(match.tournamentLevel + match.matchNumber)"></a>
                            <div @Html.Raw(teamClasses[redAlliance[0].number])><a href="@(Model.TeamOfInterestUrl(match.eventCode, redAlliance[0].number, teamActions[redAlliance[0].number]))" style="color:inherit">@redAlliance[0].number</a></div>
                            <div @Html.Raw(teamClasses[redAlliance[1].number])><a href="@(Model.TeamOfInterestUrl(match.eventCode, redAlliance[1].number, teamActions[redAlliance[1].number]))" style="color:inherit">@redAlliance[1].number</a></div>
                            <div @Html.Raw(teamClasses[redAlliance[2].number])><a href="@(Model.TeamOfInterestUrl(match.eventCode, redAlliance[2].number, teamActions[redAlliance[2].number]))" style="color:inherit">@redAlliance[2].number</a></div>
                        </td>
                        @{
                            string scoreRed = string.Empty;
                            string scoreBlue = string.Empty;
                            if (match.actualStartTime != null)
                            {
                                scoreRed = match.scoreRedFinal.ToString();
                                scoreBlue = match.scoreBlueFinal.ToString();
                            }
                            string scoreWin = "Invert scoreWin";
                        }
                        <td class="@((match.scoreRedFinal > match.scoreBlueFinal) ? "red" + scoreWin : "red")">@scoreRed</td>
                        <td class="@((match.scoreRedFinal < match.scoreBlueFinal) ? "blue" + scoreWin : "blue")">@scoreBlue</td>
                        <td class="blue">
                            <div @Html.Raw(teamClasses[blueAlliance[0].number])><a href="@(Model.TeamOfInterestUrl(match.eventCode, blueAlliance[0].number, teamActions[blueAlliance[0].number]))" style="color:inherit">@blueAlliance[0].number</a></div>
                            <div @Html.Raw(teamClasses[blueAlliance[1].number])><a href="@(Model.TeamOfInterestUrl(match.eventCode, blueAlliance[1].number, teamActions[blueAlliance[1].number]))" style="color:inherit">@blueAlliance[1].number</a></div>
                            <div @Html.Raw(teamClasses[blueAlliance[2].number])><a href="@(Model.TeamOfInterestUrl(match.eventCode, blueAlliance[2].number, teamActions[blueAlliance[2].number]))" style="color:inherit">@blueAlliance[2].number</a></div>
                        </td>
                    </tr>
                }
            </table>
        }

        if (eventState == FRCEventState.Quarterfinals || eventState == FRCEventState.Semifinals || eventState == FRCEventState.Finals || eventState == FRCEventState.Past)
        {
            List<Match> playoffs = Model.Matches.Where(m => m.tournamentLevel == "Playoff" && m.title.EndsWith("1")).ToList();
            Dictionary<int, string> teamClasses = new Dictionary<int, string>();
            foreach (Match playoff in playoffs)
            {
                foreach (Team team in playoff.teams)
                {
                    if (Model.TeamsOfInterest.Where(t => t.number == team.number).Count() > 0)
                    {
                        teamClasses[team.number] = "teamOfInterest";
                        if (team.station.StartsWith("Red")) { teamClasses[team.number] += " redInvert"; }
                        else { teamClasses[team.number] += " blueInvert"; }
                    }
                    else { teamClasses[team.number] = string.Empty; }
                }
            }

            Match qf1 = Model.Matches.Where(m => m.title == "Quarterfinal 1-1").FirstOrDefault();
            Match qf2 = Model.Matches.Where(m => m.title == "Quarterfinal 2-1").FirstOrDefault();
            Match qf3 = Model.Matches.Where(m => m.title == "Quarterfinal 3-1").FirstOrDefault();
            Match qf4 = Model.Matches.Where(m => m.title == "Quarterfinal 4-1").FirstOrDefault();

            Match sf1 = Model.Matches.Where(m => m.title == "Semifinal 1-1").FirstOrDefault();
            Match sf2 = Model.Matches.Where(m => m.title == "Semifinal 2-1").FirstOrDefault();

            Match f = Model.Matches.Where(m => m.title == "Final 1").FirstOrDefault();
            <br />
            @*<table style="width: 100%">
                <tr><td colspan="10"><a name="Brackets"></a><div class="followMeBar">Brackets</div></td></tr>
                <tr>
                    <td class="red" width="16%" style="border-right:none">
                        @Html.Raw(qf1.teams.Where(t => t.station.StartsWith("Red")).Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>
                    <td style="border-left:none">@if (qf1.teams.Where(t => t.station.StartsWith("Red") && sf1.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0)
                    {<div class="arrowred_right"></div>}</td>

                    <td rowspan="2" class="red" width="16%" style="border-right:none">
                        @Html.Raw(sf1.teams.Where(t => t.station.StartsWith("Red")).Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>
                    <td rowspan="2" style="border-left:none">@if (sf1.teams.Where(t => t.station.StartsWith("Red") && f.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0)
                    {<div class="arrowred_right"></div>}</td>

                    <td rowspan="4" class="red" width="16%">
                        @Html.Raw(f.teams.Where(t => t.station.StartsWith("Red")).Select(t => "<div class=\"" + teamClasses[t.number] + "\">" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>

                    <td rowspan="4" class="blue" width="16%">
                        @Html.Raw(f.teams.Where(t => t.station.StartsWith("Blue")).Select(t => "<div class=\"" + teamClasses[t.number] + "\">" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>

                    <td rowspan="2" style="border-right:none">@if (sf2.teams.Where(t => t.station.StartsWith("Red") && f.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0)
                    {<div class="arrowred_left"></div>}</td>
                    <td rowspan="2" class="red" width="16%" style="border-left:none">
                        @Html.Raw(sf2.teams.Where(t => t.station.StartsWith("Red")).Select(t => "<div class=\"" + teamClasses[t.number] + "\">" + t.number.ToString("#") + "&nbsp;</div>").Aggregate((html, cell) => html + cell))
                    </td>

                    <td style="border-right:none">@if (qf3.teams.Where(t => t.station.StartsWith("Red") && sf2.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0)
                    {<div class="arrowred_left"></div>}</td>
                    <td class="red" width="16%" style="border-left:none">
                        @Html.Raw(qf3.teams.Where(t => t.station.StartsWith("Red")).Select(t => "<div class=\"" + teamClasses[t.number] + "\">" + t.number.ToString("#") + "&nbsp;</div>").Aggregate((html, cell) => html + cell))
                    </td>
                </tr>
                <tr>
                    <td class="blue" style="border-right:none">
                        @Html.Raw(qf1.teams.Where(t => t.station.StartsWith("Blue")).Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>
                    <td style="border-left:none">@if (qf1.teams.Where(t => t.station.StartsWith("Blue") && sf1.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0)
                    {<div class="arrowblue_right"></div>}</td>

                    <td style="border-right:none">@if (qf3.teams.Where(t => t.station.StartsWith("Blue") && sf2.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0)
                    {<div class="arrowblue_left"></div>}</td>
                    <td class="blue" style="border-left:none">
                        @Html.Raw(qf3.teams.Where(t => t.station.StartsWith("Blue")).Select(t => "<div class=\"" + teamClasses[t.number] + "\">" + t.number.ToString("#") + "&nbsp;</div>").Aggregate((html, cell) => html + cell))
                    </td>
                </tr>
                <tr>
                    <td class="red" style="border-right:none">
                        @Html.Raw(qf2.teams.Where(t => t.station.StartsWith("Red")).Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>
                    <td style="border-left:none">@if (qf2.teams.Where(t => t.station.StartsWith("Red") && sf1.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0)
                    {<div class="arrowred_right"></div>}</td>

                    <td rowspan="2" class="blue" style="border-right:none">
                        @Html.Raw(sf1.teams.Where(t => t.station.StartsWith("Blue")).Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>
                    <td rowspan="2" style="border-left:none">@if (sf1.teams.Where(t => t.station.StartsWith("Blue") && f.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0)
                    {<div class="arrowblue_right"></div>}</td>

                    <td rowspan="2" style="border-right:none">@if (sf2.teams.Where(t => t.station.StartsWith("Blue") && sf1.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0)
                    {<div class="arrowblue_left"></div>}</td>
                    <td rowspan="2" class="blue" style="border-left:none" style="border-left:none">
                        @Html.Raw(sf2.teams.Where(t => t.station.StartsWith("Blue")).Select(t => "<div class=\"" + teamClasses[t.number] + "\">" + t.number.ToString("#") + "&nbsp;</div>").Aggregate((html, cell) => html + cell))
                    </td>

                    <td style="border-right:none">@if (qf4.teams.Where(t => t.station.StartsWith("Red") && sf2.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0)
                    {<div class="arrowred_left"></div>}</td>
                    <td class="red" style="border-left:none" style="border-left:none">
                        @Html.Raw(qf4.teams.Where(t => t.station.StartsWith("Red")).Select(t => "<div class=\"" + teamClasses[t.number] + "\">" + t.number.ToString("#") + "&nbsp;</div>").Aggregate((html, cell) => html + cell))
                    </td>
                </tr>
                <tr>
                    <td class="blue" style="border-right:none">
                        @Html.Raw(qf2.teams.Where(t => t.station.StartsWith("Blue")).Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>
                    <td style="border-left:none">@if (qf2.teams.Where(t => t.station.StartsWith("Blue") && sf1.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0)
                    {<div class="arrowblue_right"></div>}</td>

                    <td style="border-right:none">@if (qf4.teams.Where(t => t.station.StartsWith("Blue") && sf2.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0)
                    {<div class="arrowblue_left"></div>}</td>
                    <td class="blue" style="border-left:none">
                        @Html.Raw(qf4.teams.Where(t => t.station.StartsWith("Blue")).Select(t => "<div class=\"" + teamClasses[t.number] + "\">" + t.number.ToString("#") + "&nbsp;</div>").Aggregate((html, cell) => html + cell))
                    </td>
                </tr>
            </table>
            <br />*@
            <table style="width: 100%">
                <tr><td colspan="10"><a name="Brackets"></a><div class="followMeBar">Brackets</div></td></tr>
                <tr>
                    <td class="red" width="16%" style="border-right:none">
                        @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["qf1-red"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>
                    <td style="border-left:none">@if (qf1.teams.Where(t => t.station.StartsWith("Red") && sf1.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0) {<div class="arrowred_right"></div>}</td>

                    <td rowspan="2" class="red" width="16%" style="border-right:none">
                        @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["sf1-red"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>
                    <td rowspan="2" style="border-left:none">@if (sf1.teams.Where(t => t.station.StartsWith("Red") && f.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0) {<div class="arrowred_right"></div>}</td>

                    <td rowspan="4" class="red" width="16%">
                        @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["f-red"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>

                    <td rowspan="4" class="blue" width="16%">
                        @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["f-blue"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>

                    <td rowspan="2" style="border-right:none">@if (sf2.teams.Where(t => t.station.StartsWith("Red") && f.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0) {<div class="arrowred_left"></div>}</td>
                    <td rowspan="2" class="red" width="16%" style="border-left:none">
                        @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["sf2-red"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>

                    <td style="border-right:none">@if (qf3.teams.Where(t => t.station.StartsWith("Red") && sf2.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0) {<div class="arrowred_left"></div>}</td>
                    <td class="red" width="16%" style="border-left:none">
                        @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["qf3-red"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>
                </tr>
                <tr>
                    <td class="blue" style="border-right:none">
                        @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["qf1-blue"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>
                    <td style="border-left:none">@if (qf1.teams.Where(t => t.station.StartsWith("Blue") && sf1.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0) {<div class="arrowblue_right"></div>}</td>

                    <td style="border-right:none">@if (qf3.teams.Where(t => t.station.StartsWith("Blue") && sf2.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0) {<div class="arrowblue_left"></div>}</td>
                    <td class="blue" style="border-left:none">
                        @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["qf3-blue"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>
                </tr>
                <tr>
                    <td class="red" style="border-right:none">
                        @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["qf2-red"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>
                    <td style="border-left:none">@if (qf2.teams.Where(t => t.station.StartsWith("Red") && sf1.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0) {<div class="arrowred_right"></div>}</td>

                    <td rowspan="2" class="blue" style="border-right:none">
                        @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["sf1-blue"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>
                    <td rowspan="2" style="border-left:none">@if (sf1.teams.Where(t => t.station.StartsWith("Blue") && f.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0) {<div class="arrowblue_right"></div>}</td>

                    <td rowspan="2" style="border-right:none">@if (sf2.teams.Where(t => t.station.StartsWith("Blue") && sf1.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0) {<div class="arrowblue_left"></div>}</td>
                    <td rowspan="2" class="blue" style="border-left:none" style="border-left:none">
                        @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["sf2-blue"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>

                    <td style="border-right:none">@if (qf4.teams.Where(t => t.station.StartsWith("Red") && sf2.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0) {<div class="arrowred_left"></div>}</td>
                    <td class="red" style="border-left:none" style="border-left:none">
                        @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["qf4-red"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>
                </tr>
                <tr>
                    <td class="blue" style="border-right:none">
                        @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["qf2-blue"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>
                    <td style="border-left:none">@if (qf2.teams.Where(t => t.station.StartsWith("Blue") && sf1.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0) {<div class="arrowblue_right"></div>}</td>

                    <td style="border-right:none">@if (qf4.teams.Where(t => t.station.StartsWith("Blue") && sf2.teams.Where(s => s.number == t.number).Count() > 0).Count() > 0) {<div class="arrowblue_left"></div>}</td>
                    <td class="blue" style="border-left:none">
                        @Html.Raw(Model.Alliances.Where(t => t.number == Model.Bracket.brackets["qf4-blue"]).FirstOrDefault().teams.Select(t => "<div class=\"" + teamClasses[t.number] + "\">&nbsp;" + t.number.ToString("#") + "</div>").Aggregate((html, cell) => html + cell))
                    </td>
                </tr>
            </table>
        }
    }
</div>