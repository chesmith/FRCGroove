@using FRCGroove.Lib.Models
@using FRCGroove.Web.Models
@model Dictionary<int, List<SelectionTeamData>>
@{
    Layout = "";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Styles.Render("~/Content/css")

    <style>
        body {
            padding: unset;
        }

        .opr, .dpr, .ccwm, .rank, .pnt {
            background-color: var(--color-background-bar);
        }

        thead, th {
            position: sticky;
            top: 0;
            z-index: 1
        }
    </style>

    <script>
        $(function () {
            //https://stackoverflow.com/questions/67460144/css-conditional-formatting-with-a-colour-range
            let hue = '110';
            let saturation = '82%';
            let maxHue = 100;
            let minHue = 30;

            let maxValue = -1000;
            let oprs = document.querySelectorAll('.opr');
            oprs.forEach((cell, index) => {
                if (Number(cell.textContent) > maxValue) maxValue = Number(cell.textContent);
            });
            oprs.forEach((cell, index) => {
                let cellValue = Number(cell.textContent);
                let hueRange = maxHue - minHue;
                let lightness = `${maxHue - hueRange * (cellValue / maxValue)}%`;
                cell.style.setProperty('--color-background-bar', `hsl(${hue}, ${saturation}, ${lightness})`);
            });

            maxValue = -1000;
            let dprs = document.querySelectorAll('.dpr');
            dprs.forEach((cell, index) => {
                if (Number(cell.textContent) > maxValue) maxValue = Number(cell.textContent);
            });
            dprs.forEach((cell, index) => {
                let cellValue = Number(cell.textContent);
                let hueRange = maxHue - minHue;
                let lightness = `${minHue + hueRange * (cellValue / maxValue)}%`;
                cell.style.setProperty('--color-background-bar', `hsl(${hue}, ${saturation}, ${lightness})`);
            });

            maxValue = -1000;
            let ccwms = document.querySelectorAll('.ccwm');
            ccwms.forEach((cell, index) => {
                if (Number(cell.textContent) > maxValue) maxValue = Number(cell.textContent);
            });
            ccwms.forEach((cell, index) => {
                let cellValue = Number(cell.textContent);
                let hueRange = maxHue - minHue;
                let lightness = `${maxHue - hueRange * (cellValue / maxValue)}%`;
                cell.style.setProperty('--color-background-bar', `hsl(${hue}, ${saturation}, ${lightness})`);
            });

            maxValue = -1000;
            let ranks = document.querySelectorAll('.rank');
            ranks.forEach((cell, index) => {
                if (Number(cell.textContent) > maxValue) maxValue = Number(cell.textContent);
            });
            ranks.forEach((cell, index) => {
                let cellValue = Number(cell.textContent);
                if (cellValue <= 8) {
                    cell.style.setProperty('--color-background-bar', `hsl(30deg, 80%, 50%)`);
                } else {
                    let hueRange = maxHue - minHue;
                    let lightness = `${minHue + hueRange * (cellValue / maxValue)}%`;
                    cell.style.setProperty('--color-background-bar', `hsl(${hue}, ${saturation}, ${lightness})`);
                }
            });

            maxValue = -1000;
            let pnts = document.querySelectorAll('.pnt');
            pnts.forEach((cell, index) => {
                if (Number(cell.textContent) > maxValue) maxValue = Number(cell.textContent);
            });
            pnts.forEach((cell, index) => {
                let cellValue = Number(cell.textContent);
                let hueRange = maxHue - minHue;
                let lightness = `${maxHue - hueRange * (cellValue / maxValue)}%`;
                cell.style.setProperty('--color-background-bar', `hsl(180, ${saturation}, ${lightness})`);
            });
        });
    </script>
</head>
<body>
    <table class="table table-striped table-bordered table-sm">
        <thead class="thead-dark">
            <tr>
                <th rowspan="2">Team</th>
                <th colspan="12">Comp 1</th>
                <th colspan="12">Comp 2</th>
                <th colspan="12">Comp 3</th>
            </tr>
            <tr>
                <th>Event</th>
                <th>Mobility</th>
                <th>Auto<br />Dock</th>
                <th>Auto<br />Engage</th>
                <th>Endgame<br />Park</th>
                <th>Endgame<br />Dock</th>
                <th>Endgame<br />Engage</th>
                <th>DQs</th>
                <th>OPR</th>
                <th>DPR</th>
                <th>CCWM</th>
                <th>Rank</th>
                <th>Event</th>
                <th>Mobility</th>
                <th>Auto<br />Dock</th>
                <th>Auto<br />Engage</th>
                <th>Endgame<br />Park</th>
                <th>Endgame<br />Dock</th>
                <th>Endgame<br />Engage</th>
                <th>DQs</th>
                <th>OPR</th>
                <th>DPR</th>
                <th>CCWM</th>
                <th>Rank</th>
                <th>Event</th>
                <th>Mobility</th>
                <th>Auto<br />Dock</th>
                <th>Auto<br />Engage</th>
                <th>Endgame<br />Park</th>
                <th>Endgame<br />Dock</th>
                <th>Endgame<br />Engage</th>
                <th>DQs</th>
                <th>OPR</th>
                <th>DPR</th>
                <th>CCWM</th>
                <th>Rank</th>
            </tr>
        </thead>
        <tbody>
            @{ foreach (int key in Model.Keys)
                {
                    List<SelectionTeamData> dataList = Model[key];
                    <tr>
                        <td>@key</td>
                    @{ foreach (SelectionTeamData data in dataList)
                        {
                            string mobility = CalculatePercent(data.AutoMobility, data.TBAMatchCount);
                            string autodock = CalculatePercent(data.AutoDock, data.TBAMatchCount);
                            string autoengage = CalculatePercent(data.AutoEngage, data.TBAMatchCount);
                            string endgamedock = CalculatePercent(data.EndgameDock, data.TBAMatchCount);
                            string endgameengage = CalculatePercent(data.EndgameEngage, data.TBAMatchCount);
                            string endgamepark = CalculatePercent(data.EndgamePark, data.TBAMatchCount);
                        <td>@data.EventCode.Substring(4).ToUpper()</td>
                        <td>@mobility</td>
                        <td>@autodock</td>
                        <td>@autoengage</td>
                        <td>@endgamepark</td>
                        <td>@endgamedock</td>
                        <td>@endgameengage</td>
                        <td @(data.DQCount > 0 ? "style=color:red" : "")>@(data.DQCount > 0 ? data.DQCount.ToString() : "-")</td>
                        <td class="opr" @(data.OPR < 0 ? "style=color:red" : "")>@data.OPR.ToString("0.00")</td>
                        <td class="dpr" @(data.DPR < 0 ? "style=color:red" : "")>@data.DPR.ToString("0.00")</td>
                        <td class="ccwm" @(data.CCWM < 0 ? "style=color:red" : "")>@data.CCWM.ToString("0.00")</td>
                        <td class="rank">@data.Rank</td>
                        }
                    }
                    </tr>
                }
            }
        </tbody>
    </table>
</body>
</html>

@{ 
    string CalculatePercent(int input, int matchCount)
    {
        return (input > 0 ? ((double)input / (double)matchCount).ToString("P0") : "-");
    }
}