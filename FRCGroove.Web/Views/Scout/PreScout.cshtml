@using FRCGroove.Lib.Models
@using FRCGroove.Web.Models
@model Dictionary<int, List<SelectionTeamData>>
@{
    Layout = "";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Styles.Render("~/Content/css")

    <style>
        body {
            padding: unset;
        }

        .opr, .dpr, .ccwm, .rank, .pnt {
            background-color: var(--color-background-bar);
        }

        thead, th {
            position: sticky;
            top: 0;
            z-index: 1
        }
    </style>

    <script>
        $(function () {
            //https://stackoverflow.com/questions/67460144/css-conditional-formatting-with-a-colour-range
            let hue = '110';
            let saturation = '82%';
            let maxHue = 100;
            let minHue = 30;

            let maxValue = -1000;
            let oprs = document.querySelectorAll('.opr');
            oprs.forEach((cell, index) => {
                if (Number(cell.textContent) > maxValue) maxValue = Number(cell.textContent);
            });
            oprs.forEach((cell, index) => {
                let cellValue = Number(cell.textContent);
                let hueRange = maxHue - minHue;
                let lightness = `${maxHue - hueRange * (cellValue / maxValue)}%`;
                cell.style.setProperty('--color-background-bar', `hsl(${hue}, ${saturation}, ${lightness})`);
            });

            maxValue = -1000;
            let dprs = document.querySelectorAll('.dpr');
            dprs.forEach((cell, index) => {
                if (Number(cell.textContent) > maxValue) maxValue = Number(cell.textContent);
            });
            dprs.forEach((cell, index) => {
                let cellValue = Number(cell.textContent);
                let hueRange = maxHue - minHue;
                let lightness = `${minHue + hueRange * (cellValue / maxValue)}%`;
                cell.style.setProperty('--color-background-bar', `hsl(${hue}, ${saturation}, ${lightness})`);
            });

            maxValue = -1000;
            let ccwms = document.querySelectorAll('.ccwm');
            ccwms.forEach((cell, index) => {
                if (Number(cell.textContent) > maxValue) maxValue = Number(cell.textContent);
            });
            ccwms.forEach((cell, index) => {
                let cellValue = Number(cell.textContent);
                let hueRange = maxHue - minHue;
                let lightness = `${maxHue - hueRange * (cellValue / maxValue)}%`;
                cell.style.setProperty('--color-background-bar', `hsl(${hue}, ${saturation}, ${lightness})`);
            });

            maxValue = -1000;
            let ranks = document.querySelectorAll('.rank');
            ranks.forEach((cell, index) => {
                if (Number(cell.textContent) > maxValue) maxValue = Number(cell.textContent);
            });
            ranks.forEach((cell, index) => {
                let cellValue = Number(cell.textContent);
                if (cellValue <= 8) {
                    cell.style.setProperty('--color-background-bar', `hsl(30deg, 80%, 50%)`);
                } else {
                    let hueRange = maxHue - minHue;
                    let lightness = `${minHue + hueRange * (cellValue / maxValue)}%`;
                    cell.style.setProperty('--color-background-bar', `hsl(${hue}, ${saturation}, ${lightness})`);
                }
            });

            maxValue = -1000;
            let pnts = document.querySelectorAll('.pnt');
            pnts.forEach((cell, index) => {
                if (Number(cell.textContent) > maxValue) maxValue = Number(cell.textContent);
            });
            pnts.forEach((cell, index) => {
                let cellValue = Number(cell.textContent);
                let hueRange = maxHue - minHue;
                let lightness = `${maxHue - hueRange * (cellValue / maxValue)}%`;
                cell.style.setProperty('--color-background-bar', `hsl(180, ${saturation}, ${lightness})`);
            });
        });
    </script>
</head>
<body>
    <table class="table table-striped table-bordered table-sm">
        <thead class="thead-dark">
            <tr>
                <th rowspan="3">Team</th>
                <th colspan="17">Comp 1</th>
                <th colspan="17">Comp 2</th>
                <th colspan="17">Comp 3</th>
            </tr>
            <tr>
                <th rowspan="2">Event</th>
                <th rowspan="2">Taxi</th>
                <th colspan="5">Climb (%)</th>
                <th colspan="5">Cargo (avg per match)</th>
                <th colspan="5">Stats</th>

                <th rowspan="2">Event</th>
                <th rowspan="2">Taxi</th>
                <th colspan="5">Climb (%)</th>
                <th colspan="5">Cargo (avg per match)</th>
                <th colspan="5">Stats</th>

                <th rowspan="2">Event</th>
                <th rowspan="2">Taxi</th>
                <th colspan="5">Climb (%)</th>
                <th colspan="5">Cargo (avg per match)</th>
                <th colspan="5">Stats</th>
            </tr>
            <tr>
                <th>Trav</th>
                <th>High</th>
                <th>Mid</th>
                <th>Low</th>
                <th>None</th>
                <th>Auto<br />High</th>
                <th>Auto<br />Low</th>
                <th>Teleop<br />High</th>
                <th>Teleop<br />Low</th>
                <th>Pts</th>
                <th>DQs</th>
                <th>OPR</th>
                <th>DPR</th>
                <th>CCWM</th>
                <th>Rank</th>
                <th>Trav</th>
                <th>High</th>
                <th>Mid</th>
                <th>Low</th>
                <th>None</th>
                <th>Auto<br />High</th>
                <th>Auto<br />Low</th>
                <th>Teleop<br />High</th>
                <th>Teleop<br />Low</th>
                <th>Pts</th>
                <th>DQs</th>
                <th>OPR</th>
                <th>DPR</th>
                <th>CCWM</th>
                <th>Rank</th>
                <th>Trav</th>
                <th>High</th>
                <th>Mid</th>
                <th>Low</th>
                <th>None</th>
                <th>Auto<br />High</th>
                <th>Auto<br />Low</th>
                <th>Teleop<br />High</th>
                <th>Teleop<br />Low</th>
                <th>Pts</th>
                <th>DQs</th>
                <th>OPR</th>
                <th>DPR</th>
                <th>CCWM</th>
                <th>Rank</th>
            </tr>
        </thead>
        <tbody>
            @{ foreach (int key in Model.Keys)
                {
                    List<SelectionTeamData> dataList = Model[key];
                    <tr>
                        <td>@key</td>
                    @{ foreach (SelectionTeamData data in dataList)
                        {
                            string autoTaxi = (data.AutoTaxi > 0 ? ((double)data.AutoTaxi / (double)data.TBAMatchCount).ToString("P0") : "-");
                            string climbTraversal = (data.ClimbTraversal > 0 ? ((double)data.ClimbTraversal / (double)data.TBAMatchCount).ToString("P0") : "-");
                            string climbHigh = (data.ClimbHigh > 0 ? ((double)data.ClimbHigh / (double)data.TBAMatchCount).ToString("P0") : "-");
                            string climbMid = (data.ClimbMid > 0 ? ((double)data.ClimbMid / (double)data.TBAMatchCount).ToString("P0") : "-");
                            string climbLow = (data.ClimbLow > 0 ? ((double)data.ClimbLow / (double)data.TBAMatchCount).ToString("P0") : "-");
                            string climbNone = ((data.TBAMatchCount - (data.ClimbTraversal + data.ClimbHigh + data.ClimbMid + data.ClimbLow)) > 0 ? ((double)(data.TBAMatchCount - (data.ClimbTraversal + data.ClimbHigh + data.ClimbMid + data.ClimbLow)) / (double)data.TBAMatchCount).ToString("P0") : "-");
                            string cargoAutoHigh = (data.CargoAutoHigh > 0 && data.CargoMatchCount > 0 ? ((double)data.CargoAutoHigh / (double)data.CargoMatchCount).ToString("0.0") : "-");
                            string cargoAutoLow = (data.CargoAutoLow > 0 && data.CargoMatchCount > 0 ? ((double)data.CargoAutoLow / (double)data.CargoMatchCount).ToString("0.0") : "-");
                            string cargoTeleopHigh = (data.CargoTeleopHigh > 0 && data.CargoMatchCount > 0 ? ((double)data.CargoTeleopHigh / (double)data.CargoMatchCount).ToString("0.0") : "-");
                            string cargoTeleopLow = (data.CargoTeleopLow > 0 && data.CargoMatchCount > 0 ? ((double)data.CargoTeleopLow / (double)data.CargoMatchCount).ToString("0.0") : "-");
                            double points = 0.0;
                            //if (data.TBAMatchCount > 0) { points += (double)(data.AutoTaxi * 2 + data.ClimbTraversal * 15 + data.ClimbHigh * 10 + data.ClimbMid * 6 + data.ClimbLow * 4) / (double)data.TBAMatchCount; }
                            if (data.CargoMatchCount > 0) { points += (double)(data.CargoAutoHigh * 4 + data.CargoAutoLow * 2 + data.CargoTeleopHigh * 2 + data.CargoTeleopLow * 1) / (double)data.CargoMatchCount; }
                        <td>@data.EventCode.Substring(4).ToUpper()</td>
                        <td>@autoTaxi</td>
                        @*<td>@((data.MatchCount - data.AutoTaxi) > 0 ? (data.MatchCount - data.AutoTaxi).ToString() : "-")</td>*@
                        <td>@climbTraversal</td>
                        <td>@climbHigh</td>
                        <td>@climbMid</td>
                        <td>@climbLow</td>
                        <td>@climbNone</td>
                        <td>@cargoAutoHigh</td>
                        <td>@cargoAutoLow</td>
                        <td>@cargoTeleopHigh</td>
                        <td>@cargoTeleopLow</td>
                        <td class="pnt">@points.ToString("0.00")</td>
                        <td @(data.DQCount > 0 ? "style=color:red" : "")>@(data.DQCount > 0 ? data.DQCount.ToString() : "-")</td>
                        <td class="opr" @(data.OPR < 0 ? "style=color:red" : "")>@data.OPR.ToString("0.00")</td>
                        <td class="dpr" @(data.DPR < 0 ? "style=color:red" : "")>@data.DPR.ToString("0.00")</td>
                        <td class="ccwm" @(data.CCWM < 0 ? "style=color:red" : "")>@data.CCWM.ToString("0.00")</td>
                        <td class="rank">@data.Rank</td>
                            }
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</body>
</html>
